//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Other/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Something"",
            ""id"": ""b35e6250-085c-49ba-8075-c01b1ea56b9d"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""2aedaa03-ca7a-42a9-9c54-3e0b0d388818"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""9fab5208-5e6a-4d76-b4c9-398763a7510f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""29154b07-cfe7-440e-b6ae-e5ce03238669"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2c488af-7400-41f5-ac65-a496e1513637"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Something"",
            ""bindingGroup"": ""Something"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Something
        m_Something = asset.FindActionMap("Something", throwIfNotFound: true);
        m_Something_Up = m_Something.FindAction("Up", throwIfNotFound: true);
        m_Something_Down = m_Something.FindAction("Down", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_Something.enabled, "This will cause a leak and performance issues, PlayerInput.Something.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Something
    private readonly InputActionMap m_Something;
    private List<ISomethingActions> m_SomethingActionsCallbackInterfaces = new List<ISomethingActions>();
    private readonly InputAction m_Something_Up;
    private readonly InputAction m_Something_Down;
    public struct SomethingActions
    {
        private @PlayerInput m_Wrapper;
        public SomethingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Something_Up;
        public InputAction @Down => m_Wrapper.m_Something_Down;
        public InputActionMap Get() { return m_Wrapper.m_Something; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SomethingActions set) { return set.Get(); }
        public void AddCallbacks(ISomethingActions instance)
        {
            if (instance == null || m_Wrapper.m_SomethingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SomethingActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
        }

        private void UnregisterCallbacks(ISomethingActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
        }

        public void RemoveCallbacks(ISomethingActions instance)
        {
            if (m_Wrapper.m_SomethingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISomethingActions instance)
        {
            foreach (var item in m_Wrapper.m_SomethingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SomethingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SomethingActions @Something => new SomethingActions(this);
    private int m_SomethingSchemeIndex = -1;
    public InputControlScheme SomethingScheme
    {
        get
        {
            if (m_SomethingSchemeIndex == -1) m_SomethingSchemeIndex = asset.FindControlSchemeIndex("Something");
            return asset.controlSchemes[m_SomethingSchemeIndex];
        }
    }
    public interface ISomethingActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
}
